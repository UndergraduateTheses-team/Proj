name: Build and Deploy to GKE

on:
  workflow_dispatch:

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: development

    env:
      GKE_CLUSTER: autopilot-cluster-1
      GKE_REGION: asia-southeast1
      IMAGE_FE: fe
      IMAGE_BE: be
      IMAGE_TAG: latest
      GAR_ZONE: asia-southeast1
      GAR_REPO: docker-registry
      PROMETHEUS_NAMESPACE: monitoring
      GRAFANA_NAMESPACE: monitoring
      PUSHGATEWAY_URL: http://<YOUR_PUSHGATEWAY_IP_OR_DNS>:9091

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2.1.7
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_ZONE }}-docker.pkg.dev

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2.3.0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
          project_id: ${{ secrets.GKE_PROJECT }}

      - name: Push metric: CI/CD started
        run: |
          echo "cicd_pipeline_status{stage=\"start\"} 1" | \
          curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/deploy_gke

      - name: Build Frontend Docker image
        run: |
          docker build \
            --tag "${{ env.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/${{ env.GAR_REPO }}/${{ env.IMAGE_FE }}:${{ env.IMAGE_TAG }}" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            --build-arg PORT=${{ secrets.PORT }} \
            -f Dockerfile.fe .

      - name: Build Backend Docker image
        run: |
          docker build \
            --tag "${{ env.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/${{ env.GAR_REPO }}/${{ env.IMAGE_BE }}:${{ env.IMAGE_TAG }}" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            --build-arg SERVER_UPLOAD_URL=${{ secrets.SERVER_UPLOAD_URL }} \
            --build-arg MONGODB_URI=${{ secrets.MONGODB_URI }} \
            -f Dockerfile.be .

      - name: Trivy Security Scan
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          ./bin/trivy image --severity CRITICAL,HIGH --format json --output trivy-report-fe.json \
            "${{ env.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/${{ env.GAR_REPO }}/${{ env.IMAGE_FE }}:${{ env.IMAGE_TAG }}"
          ./bin/trivy image --severity CRITICAL,HIGH --format json --output trivy-report-be.json \
            "${{ env.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/${{ env.GAR_REPO }}/${{ env.IMAGE_BE }}:${{ env.IMAGE_TAG }}"

      - name: Upload Trivy Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-reports
          path: |
            trivy-report-fe.json
            trivy-report-be.json

      - name: Push Trivy Metrics to Prometheus
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          FE_HIGH=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH")] | length' trivy-report-fe.json)
          FE_CRITICAL=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' trivy-report-fe.json)
          BE_HIGH=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "HIGH")] | length' trivy-report-be.json)
          BE_CRITICAL=$(jq '[.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL")] | length' trivy-report-be.json)

          echo "trivy_vulnerabilities{component=\"frontend\",severity=\"HIGH\"} $FE_HIGH" | curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/trivy_fe
          echo "trivy_vulnerabilities{component=\"frontend\",severity=\"CRITICAL\"} $FE_CRITICAL" | curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/trivy_fe
          echo "trivy_vulnerabilities{component=\"backend\",severity=\"HIGH\"} $BE_HIGH" | curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/trivy_be
          echo "trivy_vulnerabilities{component=\"backend\",severity=\"CRITICAL\"} $BE_CRITICAL" | curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/trivy_be

      - name: Push Docker images to Artifact Registry
        run: |
          docker push "${{ env.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/${{ env.GAR_REPO }}/${{ env.IMAGE_FE }}:${{ env.IMAGE_TAG }}"
          docker push "${{ env.GAR_ZONE }}-docker.pkg.dev/${{ secrets.GKE_PROJECT }}/${{ env.GAR_REPO }}/${{ env.IMAGE_BE }}:${{ env.IMAGE_TAG }}"

      - name: Deploy to GKE
        run: |
          kubectl apply -f frontend-deployment.yml -f backend-deployment.yml -f service.yaml -n default
          kubectl rollout status deployment/frontend-deployment -n default
          kubectl rollout status deployment/backend-deployment -n default

      - name: Push metric: CI/CD success
        if: success()
        run: |
          echo "cicd_pipeline_status{stage=\"success\"} 1" | \
          curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/deploy_gke

      - name: Push metric: CI/CD failed
        if: failure()
        run: |
          echo "cicd_pipeline_status{stage=\"fail\"} 1" | \
          curl --data-binary @- ${{ env.PUSHGATEWAY_URL }}/metrics/job/deploy_gke
